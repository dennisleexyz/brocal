{"version":3,"file":"content_script.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://brocal/./src/content_script/content_script.js"],"sourcesContent":["let courses = []\r\nlet finalTimeFinder = getFinalsTimes()\r\n/* {\r\n            \"name\": \"PLS 2030: Intro to Int'l Relations\",\r\n            \"startDt\": \"2024-01-20\",\r\n            \"endDt\": \"2024-05-10\",\r\n            \"meetingTimeStart\": \"10:00\",\r\n            \"meetingTimeEnd\": \"11:15\",\r\n            \"location\": \"5 138\",\r\n            \"url_address\": \"https%3A%2F%2Fwww.cpp.edu%2Fmaps%2F%3Fid%3D1130%23%21m%2F276183\",\r\n            \"meetingPattern\": \"Monday,Wednesday\",\r\n} */\r\n\r\nsetTimeout(async () => {\r\n    let schedule = parse()\r\n    //iterates through schedule and adds final exam date\r\n    for (let i = 0; i < schedule.length; i++) {\r\n        //preprocessing dates for final exam map\r\n        let timeStart = schedule[i].meetingTimeStart.replace(/^0+/, \"\").toUpperCase();\r\n        let timeEnd = schedule[i].meetingTimeEnd.replace(/^0+/, \"\").toUpperCase();\r\n\r\n        let timeKey = timeStart + \" - \" + timeEnd\r\n        let dateKey = schedule[i].meetingPattern.map(date => date.substring(0,2)).join(\"-\")\r\n\r\n        schedule[i].finalExamDate = finalTimeFinder.get(dateKey).get(timeKey)\r\n    }\r\n    console.log(schedule)\r\n    console.log(ics(parse()))\r\n\r\n}, 5000);\r\n\r\nfunction findDuplicate(courses, courseName) {\r\n    for(let i = 0; i < courses.length; i++) {\r\n        if(courses[i].name == courseName) {\r\n            return i\r\n        }\r\n    }\r\n    return -1\r\n}\r\n\r\nfunction parse() {\r\n    let dailySchedule = document.querySelector(\"class-schedule\").shadowRoot.querySelectorAll(\".daily-schedule\") \r\n    dailySchedule.forEach(day => {\r\n        currentDay = day.querySelector(\"h4\").innerText\r\n        day.querySelectorAll(\".course\").forEach(course => {\r\n            let courseName = course.querySelector(\".info\").querySelector(\"strong\").innerText.trim()\r\n            let prevCourseIndex = findDuplicate(courses, courseName)\r\n            //Currently query selecting clicks link for a tag\r\n            //location = course.querySelector(\".info\").querySelector(\"a\")\r\n            //url = course.querySelector(\".info\").querySelector(\"a\")\r\n            let time = course.querySelector(\".time\").querySelector(\"p\").innerText.split(/\\n|\\s{2,}/).map(s => s.trim())\r\n            if(prevCourseIndex != -1) {\r\n                courses[prevCourseIndex].meetingPattern.push(currentDay)\r\n            } else {\r\n                newEntry = {\r\n                    name: courseName,\r\n                    startDt: \"2024-01-20\",\r\n                    endDt: \"2024-05-10\",\r\n                    meetingTimeStart: time[0],\r\n                    meetingTimeEnd: time[1],\r\n                    location: \"location\",\r\n                    url_address: \"url\",\r\n                    meetingPattern: [currentDay],\r\n                    finalExamDate: null\r\n                }\r\n                courses.push(newEntry)\r\n            }\r\n        })\r\n    })\r\n    return courses\r\n}\r\n\r\nfunction getFinalsTimes() {\r\n    let finalTimeFinder = new Map()\r\n    let document\r\n    var myHeaders = new Headers();\r\n\r\n    var requestOptions = {\r\n    method: 'GET',\r\n    headers: myHeaders,\r\n    redirect: 'follow'\r\n    };\r\n    \r\n    meetPerWeek = 1\r\n    fetch(\"https://www.cpp.edu/studentsuccess/academic-calendar/finals-week.shtml\", requestOptions)\r\n    .then(response => response.text())\r\n    .then(result => {\r\n        document = new DOMParser().parseFromString(result, 'text/html')\r\n        let htmlElement = document.documentElement;\r\n        let sections = htmlElement.querySelectorAll(\".mt-4\")\r\n        //Returns card from all sections\r\n        sections.forEach(section => {section.querySelectorAll(\".card\").forEach(card => {\r\n                var regex = /[A-Z][a-z]{1}/g;\r\n                let title = card.querySelector(\"button\").innerText.trim()\r\n                //Retrieves first three letters from the day and sets it as the key, if there are more than one day it joins it\r\n                dayKey = title.match(regex).join(\"-\")\r\n                //Creates map for each day\r\n                finalTimeFinder.set(dayKey, new Map())\r\n                card.querySelectorAll(\"tr:not(:first-child)\").forEach(row => {\r\n                    let timeKey = row.querySelectorAll(\"td > p\")[0].innerHTML.trim().padStart(5, \"0\")\r\n                    let finalExamDateTime = row.querySelectorAll(\"td > p\")[1].innerHTML.replace(/\\([^()]*\\)/g, '').trim() + \" \" + row.querySelectorAll(\"td > p\")[2].innerHTML.trim()\r\n                    finalTimeFinder.get(dayKey).set(timeKey, finalExamDateTime)\r\n                })\r\n            })\r\n        })\r\n        console.log(sections);\r\n        console.log(finalTimeFinder)\r\n    })\r\n    .catch(error => console.log('error', error));\r\n\r\n    return finalTimeFinder\r\n}\r\n\r\nfunction ics (courses) {\r\n  ics = 'BEGIN:VCALENDAR\\n'\r\n\r\n  courses.forEach(e => {\r\n    e.startDt = e.startDt.replaceAll('-', '')\r\n    e.endDt = e.endDt.replaceAll('-', '')\r\n    e.meetingTimeStart = e.meetingTimeStart.replaceAll(':', '').split(\" \")[0]\r\n    e.meetingTimeEnd = e.meetingTimeEnd.replaceAll(':', '').split(\" \")[0]\r\n    e.meetingPattern = e.meetingPattern\r\n      .map(e => e.substring(0, 2))\r\n      .join()\r\n      .toUpperCase()\r\n\r\n    ics += 'BEGIN:VEVENT\\n'\r\n    ics += `SUMMARY:${e.name}\\n`\r\n    ics += `RRULE:FREQ=WEEKLY;BYDAY=${e.meetingPattern};UNTIL=${e.endDt}\\n`\r\n    ics += `DTSTART;TZID=America/Los_Angeles:${e.startDt}T${e.meetingTimeStart}00\\n`\r\n    ics += `DTEND;TZID=America/Los_Angeles:${e.startDt}T${e.meetingTimeEnd}00\\n`\r\n    ics += `DESCRIPTION:${e.name}\\n`\r\n    ics += 'END:VEVENT\\n'\r\n  })\r\n\r\n  ics += 'END:VCALENDAR\\n'\r\n\r\n  return ics\r\n}"],"names":[],"sourceRoot":""}