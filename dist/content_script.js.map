{"version":3,"file":"content_script.js","mappingssources":["webpack://brocal/./src/content_script/content_script.js"],"sourcesContent":["let courses = []\nlet finalTimeFinder = getFinalsTimes()\n/* {\n            \"name\": \"PLS 2030: Intro to Int'l Relations\",\n            \"startDt\": \"2024-01-20\",\n            \"endDt\": \"2024-05-10\",\n            \"meetingTimeStart\": \"10:00\",\n            \"meetingTimeEnd\": \"11:15\",\n            \"location\": \"5 138\",\n            \"url_address\": \"https%3A%2F%2Fwww.cpp.edu%2Fmaps%2F%3Fid%3D1130%23%21m%2F276183\",\n            \"meetingPattern\": \"Monday,Wednesday\",\n} */\n\nsetTimeout(async () => {\n    let schedule = parse()\n    //iterates through schedule and adds final exam date\n    for (let i = 0; i < schedule.length; i++) {\n        //preprocessing dates for final exam map\n        let timeStart = schedule[i].meetingTimeStart.replace(/^0+/, \"\").toUpperCase();\n        let timeEnd = schedule[i].meetingTimeEnd.replace(/^0+/, \"\").toUpperCase();\n\n        let timeKey = timeStart + \" - \" + timeEnd\n        let dateKey = schedule[i].meetingPattern.map(date => date.substring(0,2)).join(\"-\")\n\n        schedule[i].finalExamDate = finalTimeFinder.get(dateKey).get(timeKey)\n    }\n    console.log(schedule)\n    console.log(ics(parse()))\n\n}, 5000);\n\nfunction findDuplicate(courses, courseName) {\n    for(let i = 0; i < courses.length; i++) {\n        if(courses[i].name == courseName) {\n            return i\n        }\n    }\n    return -1\n}\n\nfunction parse() {\n    let dailySchedule = document.querySelector(\"class-schedule\").shadowRoot.querySelectorAll(\".daily-schedule\") \n    dailySchedule.forEach(day => {\n        currentDay = day.querySelector(\"h4\").innerText\n        day.querySelectorAll(\".course\").forEach(course => {\n            let courseName = course.querySelector(\".info\").querySelector(\"strong\").innerText.trim()\n            let prevCourseIndex = findDuplicate(courses, courseName)\n            //Currently query selecting clicks link for a tag\n            //location = course.querySelector(\".info\").querySelector(\"a\")\n            //url = course.querySelector(\".info\").querySelector(\"a\")\n            let time = course.querySelector(\".time\").querySelector(\"p\").innerText.split(/\\n|\\s{2,}/).map(s => s.trim())\n            if(prevCourseIndex != -1) {\n                courses[prevCourseIndex].meetingPattern.push(currentDay)\n            } else {\n                newEntry = {\n                    name: courseName,\n                    startDt: \"2024-01-20\",\n                    endDt: \"2024-05-10\",\n                    meetingTimeStart: time[0],\n                    meetingTimeEnd: time[1],\n                    location: \"location\",\n                    url_address: \"url\",\n                    meetingPattern: [currentDay],\n                    finalExamDate: null\n                }\n                courses.push(newEntry)\n            }\n        })\n    })\n    return courses\n}\n\nfunction getFinalsTimes() {\n    let finalTimeFinder = new Map()\n    let document\n    var myHeaders = new Headers();\n\n    var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n    };\n    \n    meetPerWeek = 1\n    fetch(\"https://www.cpp.edu/studentsuccess/academic-calendar/finals-week.shtml\", requestOptions)\n    .then(response => response.text())\n    .then(result => {\n        document = new DOMParser().parseFromString(result, 'text/html')\n        let htmlElement = document.documentElement;\n        let sections = htmlElement.querySelectorAll(\".mt-4\")\n        //Returns card from all sections\n        sections.forEach(section => {section.querySelectorAll(\".card\").forEach(card => {\n                var regex = /[A-Z][a-z]{1}/g;\n                let title = card.querySelector(\"button\").innerText.trim()\n                //Retrieves first three letters from the day and sets it as the key, if there are more than one day it joins it\n                dayKey = title.match(regex).join(\"-\")\n                //Creates map for each day\n                finalTimeFinder.set(dayKey, new Map())\n                card.querySelectorAll(\"tr:not(:first-child)\").forEach(row => {\n                    let timeKey = row.querySelectorAll(\"td > p\")[0].innerHTML.trim().padStart(5, \"0\")\n                    let finalExamDateTime = row.querySelectorAll(\"td > p\")[1].innerHTML.replace(/\\([^()]*\\)/g, '').trim() + \" \" + row.querySelectorAll(\"td > p\")[2].innerHTML.trim()\n                    finalTimeFinder.get(dayKey).set(timeKey, finalExamDateTime)\n                })\n            })\n        })\n        console.log(sections);\n        console.log(finalTimeFinder)\n    })\n    .catch(error => console.log('error', error));\n\n    return finalTimeFinder\n}\n\nfunction ics (courses) {\n  ics = 'BEGIN:VCALENDAR\\n'\n\n  courses.forEach(e => {\n    e.startDt = e.startDt.replaceAll('-', '')\n    e.endDt = e.endDt.replaceAll('-', '')\n    e.meetingTimeStart = e.meetingTimeStart.replaceAll(':', '').split(\" \")[0]\n    e.meetingTimeEnd = e.meetingTimeEnd.replaceAll(':', '').split(\" \")[0]\n    e.meetingPattern = e.meetingPattern\n      .map(e => e.substring(0, 2))\n      .join()\n      .toUpperCase()\n\n    ics += 'BEGIN:VEVENT\\n'\n    ics += `SUMMARY:${e.name}\\n`\n    ics += `RRULE:FREQ=WEEKLY;BYDAY=${e.meetingPattern};UNTIL=${e.endDt}\\n`\n    ics += `DTSTART;TZID=America/Los_Angeles:${e.startDt}T${e.meetingTimeStart}00\\n`\n    ics += `DTEND;TZID=America/Los_Angeles:${e.startDt}T${e.meetingTimeEnd}00\\n`\n    ics += `DESCRIPTION:${e.name}\\n`\n    ics += 'END:VEVENT\\n'\n  })\n\n  ics += 'END:VCALENDAR\\n'\n\n  return ics\n}"],"names":[],"sourceRoot":""}